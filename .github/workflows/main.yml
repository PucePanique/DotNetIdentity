name: Publish to Docker Hub

on:
  push:
    branches:
      - master   # change si ta branche principale est "main"

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      # 1) Checkout
      - name: Checkout code
        uses: actions/checkout@v4

      # 2) Setup .NET 8 SDK
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      # 3) Restore
      - name: Restore dependencies
        run: dotnet restore

      # 4) Build
      - name: Build
        run: dotnet build --configuration Release --no-restore

      # 5) Login Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.VPS_DOCKER_USERNAME }}
          password: ${{ secrets.VPS_DOCKER_PASSWORD }}

      # 6) Build & push image (la version "latest" + tag de commit)
      - name: Build and Push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ secrets.VPS_DOCKER_USERNAME }}/dotnet-app:latest
            ${{ secrets.VPS_DOCKER_USERNAME }}/dotnet-app:${{ github.sha }}

      # 7) Deploy on VPS via SSH (pull + compose up -d)
      - name: Deploy on VPS
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            set -euo pipefail
            cd ${{ secrets.VPS_APP_DIR }}

            # .env minimal pour l'app
            install -m 600 /dev/null .env
            cat > .env << 'EOF'
            DOCKERHUB_USER=${{ secrets.VPS_DOCKER_USERNAME }}
            SA_PASSWORD=${{ secrets.SA_PASSWORD }}
            EOF

            # Réseau partagé entre app et SQL Server existant
            sudo docker network inspect cesi >/dev/null 2>&1 || sudo docker network create cesi

            # Raccorder le conteneur SQL Server existant au réseau "cesi" (ignore si déjà connecté)
            if sudo docker ps -a --format '{{.Names}}' | grep -qx 'sqlserver'; then
              sudo docker network connect cesi sqlserver 2>/dev/null || true
            else
              echo "Attention: aucun conteneur nommé 'sqlserver' trouvé. Vérifie le nom du conteneur DB."
            fi

            # Mettre à jour uniquement l'image/app
            sudo docker compose pull app
            sudo docker compose up -d app
            sudo docker image prune -f

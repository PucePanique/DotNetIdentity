name: CI/CD â€” .NET 8 + Docker + VPS

on:
  push:
    branches:
      - master   # adapte si ta branche principale est "main"

env:
  REGISTRY_USER: ${{ secrets.VPS_DOCKER_USERNAME }}
  REGISTRY_PASS: ${{ secrets.VPS_DOCKER_PASSWORD }}
  IMAGE_NAME: dotnet-app

concurrency:
  group: cicd-${{ github.ref }}
  cancel-in-progress: false

jobs:
  build-dotnet:
    name: Build & Restore (.NET)
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET 8 SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Cache NuGet
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: nuget-${{ runner.os }}-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            nuget-${{ runner.os }}-

      - name: Restore
        run: dotnet restore

      - name: Build (Release)
        run: dotnet build --configuration Release --no-restore

      # Optionnel: Tests
      # - name: Test
      #   run: dotnet test --configuration Release --no-build --logger "trx;LogFileName=test-results.trx"

      - name: Compute version
        id: version
        run: |
          echo "version=${GITHUB_SHA}" >> "$GITHUB_OUTPUT"

  docker-publish:
    name: Build & Push Docker image
    runs-on: ubuntu-latest
    needs: build-dotnet
    outputs:
      image_tag: ${{ steps.meta.outputs.sha }}
      image_ref: ${{ steps.tags.outputs.image_ref }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU (multi-arch, optionnel)
        uses: docker/setup-qemu-action@v3

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.REGISTRY_USER }}
          password: ${{ env.REGISTRY_PASS }}

      - name: Derive tags
        id: tags
        run: |
          SHA=${{ needs.build-dotnet.outputs.version }}
          echo "image_ref=${{ env.REGISTRY_USER }}/${{ env.IMAGE_NAME }}" >> "$GITHUB_OUTPUT"
          echo "sha=${SHA}" >> "$GITHUB_OUTPUT"

      - name: Build & Push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          # ajoute d'autres plateformes si nÃ©cessaire: linux/arm64
          platforms: linux/amd64
          tags: |
            ${{ steps.tags.outputs.image_ref }}:latest
            ${{ steps.tags.outputs.image_ref }}:${{ steps.tags.outputs.sha }}
          cache-from: type=registry,ref=${{ steps.tags.outputs.image_ref }}:buildcache
          cache-to: type=registry,ref=${{ steps.tags.outputs.image_ref }}:buildcache,mode=max

  deploy-vps:
    name: Deploy on VPS
    runs-on: ubuntu-latest
    needs: docker-publish
    steps:
      - name: Deploy via SSH
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script_stop: true
          script: |
            set -euo pipefail
            cd ${{ secrets.VPS_APP_DIR }}

            # CrÃ©er le .env avec toutes les variables nÃ©cessaires
            cat > .env << 'EOF'
            # Docker Hub
            DOCKERHUB_USER=${{ secrets.VPS_DOCKER_USERNAME }}
            APP_IMAGE=${{ secrets.VPS_DOCKER_USERNAME }}/dotnet-app:latest
            
            # Database Configuration
            DB_HOST=sqlserver
            DB_PORT=1433
            DB_NAME=DotNetIdentityDB
            DB_USER=sa
            DB_SA_PASSWORD=${{ secrets.SQL_SA_PASSWORD }}
            
            # Connection String (valeurs fixes, pas de variables)
            CONNECTION_STRING=Server=sqlserver,1433;Database=DotNetIdentityDB;User Id=sa;Password=${{ secrets.SQL_SA_PASSWORD }};Encrypt=True;TrustServerCertificate=True;MultipleActiveResultSets=true
            
            # App Environment
            ASPNETCORE_ENVIRONMENT=Production
            EOF

            echo "âœ… Fichier .env crÃ©Ã© :"
            cat .env

            # Network setup
            sudo docker network inspect cesi >/dev/null 2>&1 || sudo docker network create cesi

            # Connect existing SQL Server to network
            if sudo docker ps -a --format '{{.Names}}' | grep -qx 'sqlserver'; then
              sudo docker network connect cesi sqlserver 2>/dev/null || true
            fi

            # Remove old app container
            if sudo docker ps -a --format '{{.Names}}' | grep -qx 'dotnet-app'; then
              sudo docker rm -f dotnet-app
            fi

            # Deploy new version
            sudo docker compose pull app
            sudo docker compose up -d app
            
            # Cleanup
            sudo docker image prune -f
            
            echo "ðŸš€ DÃ©ploiement terminÃ©"


